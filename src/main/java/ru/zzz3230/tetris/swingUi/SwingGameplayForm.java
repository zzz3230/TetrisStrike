package ru.zzz3230.tetris.swingUi;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.zzz3230.tetris.controller.GameplayController;
import ru.zzz3230.tetris.model.gameplay.GameplayContext;
import ru.zzz3230.tetris.swingUi.opengl.OpenGLSwingPanel;
import ru.zzz3230.tetris.utils.Observer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.KeyEvent;

public class SwingGameplayForm implements SwingPage, Observer<GameplayContext> {

    private static final Logger log = LoggerFactory.getLogger(SwingGameplayForm.class);
    private final GameplayController controller;
    private JButton exitButton;
    private JPanel rootPanel;
    private JPanel gameFieldPanel;
    private JPanel nextPreviewPanel;
    private JLabel scoreLabel;
    private SwingGamePanel nextPreviewGamePanel;

    private OpenGLSwingPanel fieldOutput;

    public SwingGameplayForm(GameplayController controller) {
        this.controller = controller;

        SwingUtilities.invokeLater(() -> {
            var panel = new OpenGLSwingPanel(24, 10);
            $$$setupUI$$$();
            panel.setAlignmentX(Component.CENTER_ALIGNMENT);
            panel.setAlignmentY(Component.CENTER_ALIGNMENT);
            fieldOutput = panel;

            gameFieldPanel.add(panel);

            nextPreviewGamePanel = new SwingGamePanel(4, 4);
            nextPreviewGamePanel.setAlignmentX(Component.CENTER_ALIGNMENT);
            nextPreviewGamePanel.setAlignmentY(Component.CENTER_ALIGNMENT);

            this.nextPreviewPanel.add(nextPreviewGamePanel, BorderLayout.CENTER);

            exitButton.addActionListener(e -> {
                controller.gotoMainMenu();
            });

            panel.setDoubleBuffered(true);
        });

        timer = new Timer(20, e -> {
            controller.moveFallingBlock(0, 1);
        });
    }

    Timer timer;

    @Override
    public JPanel getRootPanel() {
        return rootPanel;
    }

    @Override
    public void onDetached(JFrame frame) {
        log.info("Gameplay detached");
        timer.stop();
        fieldOutput.dispose();
    }

    @Override
    public void onAttached(JFrame frame) {
        log.info("Gameplay attached");

        TetrisKeyListener keyListener = new TetrisKeyListener(controller, timer);

        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyboardFocusManager() {
            @Override
            public boolean dispatchEvent(AWTEvent e) {
                return false;
            }

            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
                keyListener.dispatchKeyEvent(e);
                return false;
            }

            @Override
            public boolean postProcessKeyEvent(KeyEvent e) {
                return false;
            }

            @Override
            public void processKeyEvent(Component focusedComponent, KeyEvent e) {

            }

            @Override
            protected void enqueueKeyEvents(long after, Component untilFocused) {

            }

            @Override
            protected void dequeueKeyEvents(long after, Component untilFocused) {

            }

            @Override
            protected void discardKeyEvents(Component comp) {

            }

            @Override
            public void focusNextComponent(Component aComponent) {

            }

            @Override
            public void focusPreviousComponent(Component aComponent) {

            }

            @Override
            public void upFocusCycle(Component aComponent) {

            }

            @Override
            public void downFocusCycle(Container aContainer) {

            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(9, 3, new Insets(10, 10, 10, 10), 10, 10));
        exitButton = new JButton();
        exitButton.setText("Exit");
        rootPanel.add(exitButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(145, 30), null, 0, false));
        gameFieldPanel = new JPanel();
        gameFieldPanel.setLayout(new BorderLayout(0, 0));
        gameFieldPanel.setBackground(new Color(-5227214));
        rootPanel.add(gameFieldPanel, new GridConstraints(0, 1, 9, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(100, 100), new Dimension(100, 100), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        rootPanel.add(panel1, new GridConstraints(1, 2, 4, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("<html><b style=\"text-align:center;\">HELP</b><br>\nLeft: ← A<br>\nRight: → D<br>\nDown: ↓ S<br>\nRotate: ↑ Q/E<br>\n</html>");
        panel1.add(label1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, BorderLayout.NORTH);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-5524801)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label2 = new JLabel();
        label2.setAlignmentX(0.5f);
        label2.setHorizontalAlignment(0);
        label2.setOpaque(false);
        label2.setText("Next");
        panel2.add(label2, BorderLayout.CENTER);
        nextPreviewPanel = new JPanel();
        nextPreviewPanel.setLayout(new BorderLayout(10, 10));
        nextPreviewPanel.setMinimumSize(new Dimension(20, 20));
        nextPreviewPanel.setPreferredSize(new Dimension(100, 100));
        panel2.add(nextPreviewPanel, BorderLayout.SOUTH);
        scoreLabel = new JLabel();
        scoreLabel.setText("<html>\n\t<span style=\"font-size: 15;\">\n\t\tSCORE \n\t\t<b style=\"font-size: 25;\">00000</b>\n\t</span>\n</html>");
        rootPanel.add(scoreLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(145, 31), null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(145, 14), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
    }

    private void updateScore(int newScore) {
        String html = """
                <html>
                	<span style="font-size: 15;">
                		SCORE
                		<b style="font-size: 25;">$$score$$</b>
                	</span>
                </html>
                """.replace("$$score$$", String.format("%05d", newScore));
        scoreLabel.setText(html);
    }

    @Override
    public void update(GameplayContext context) {
        updateScore(context.score());
        fieldOutput.setFieldData(context);

        nextPreviewGamePanel.clear();

        for (int i = 0; i < context.nextBlock().height(); i++) {
            for (int j = 0; j < context.nextBlock().width(); j++) {
                if (i >= nextPreviewGamePanel.getHeight() || j >= nextPreviewGamePanel.getWidth()) {
                    continue;
                }
                if (context.nextBlock().form()[i][j]) {
                    nextPreviewGamePanel.setCellColor(i, j, context.nextBlock().color());
                }
            }
        }
        nextPreviewGamePanel.repaint();

        fieldOutput.repaint();
    }
}
