package ru.zzz3230.tetris.swingUi;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import ru.zzz3230.activity.AuthProvider;
import ru.zzz3230.tetris.controller.MainMenuController;
import ru.zzz3230.tetris.model.MainMenuContext;
import ru.zzz3230.tetris.utils.Observer;
import ru.zzz3230.tetris.utils.Utils;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.Arrays;
import java.util.function.Consumer;
import java.util.function.Supplier;

public class MainMenuForm implements SwingPage, Observer<MainMenuContext> {

    private static final String ONLINE_FORMAT = """
            <html>login as<br/> <b>%s</b> </html>
            """;
    private static final String OFFLINE_FORMAT = """
            <html>playing<br/> <b>OFFLINE</b> </html>
            """;

    private JButton playButton;
    private JButton exitButton;
    private JPanel rootPanel;
    private JButton button1;
    private JLabel loginStatus;
    private JLabel avatar;

    private JFrame frame;

    public MainMenuForm(MainMenuController controller) {
        playButton.addActionListener(e -> {
            controller.startGame();
        });

        exitButton.addActionListener(e -> {

        });

        button1.addActionListener(e -> {
            controller.showLeaderboard();
        });
    }

    @Override
    public void onAttached(JFrame frame) {
        //button1.setIcon(Utils.getFittedImage("/icons/cup.png", button1.getWidth(), button1.getHeight()));
        this.frame = frame;
    }

    public void showWelcomeDialog(AuthProvider[] providers, Consumer<AuthProvider> callback) {
        SwingUtilities.invokeLater(() -> {
            JDialog popupMenu = new JDialog(frame, "Welcome", true);
            popupMenu.setLocationRelativeTo(null);
            popupMenu.setSize(400, 120);
            var gl = new GridLayout(2, 2);
            gl.setHgap(10);
            gl.setVgap(10);
            popupMenu.setLayout(gl);
            var loginBtn = new JButton("Login via Discord");
            loginBtn.setEnabled(Arrays.stream(providers).anyMatch(x -> x == AuthProvider.DISCORD));

            loginBtn.addActionListener(e -> {
                callback.accept(AuthProvider.DISCORD);
                popupMenu.dispose();
            });
            popupMenu.add(loginBtn);

            popupMenu.add(new JLabel("<html><i><font size=\"2\">*Grant access to the leaderboard</font></i></html>"));

            var offlineBtn = new JButton("Stay offline");
            offlineBtn.setEnabled(Arrays.stream(providers).anyMatch(x -> x == AuthProvider.OFFLINE));
            popupMenu.add(offlineBtn);
            offlineBtn.addActionListener(e -> {
                callback.accept(AuthProvider.OFFLINE);
                popupMenu.dispose();
            });

            popupMenu.setVisible(true);
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        Font rootPanelFont = UIManager.getFont("Button.font");
        if (rootPanelFont != null) rootPanel.setFont(rootPanelFont);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        rootPanel.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(panel2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(5, 2, new Insets(0, 10, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(365, 89), null, 0, false));
        playButton = new JButton();
        playButton.setText("Play");
        panel3.add(playButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        panel3.add(exitButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JButton button2 = new JButton();
        button2.setText("Settings");
        panel3.add(button2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel2.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 5, new Insets(10, 0, 0, 10), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(panel4, gbc);
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/icons/tetris_header_3.png")));
        label1.setText("");
        panel4.add(label1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel4.add(spacer4, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        panel4.add(spacer5, new GridConstraints(0, 3, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        panel4.add(spacer6, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 0, 10), -1, -1));
        panel4.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        button1 = new JButton();
        button1.setEnabled(true);
        button1.setHideActionText(false);
        button1.setHorizontalAlignment(4);
        button1.setHorizontalTextPosition(2);
        button1.setIcon(new ImageIcon(getClass().getResource("/icons/cup.png")));
        button1.setIconTextGap(0);
        button1.setText("");
        panel5.add(button1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(60, 60), new Dimension(60, 60), new Dimension(60, 60), 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 2, new Insets(10, 10, 10, 10), -1, -1));
        panel4.add(panel6, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        loginStatus = new JLabel();
        loginStatus.setText("<html><i>Loading...\n</i></html>");
        panel6.add(loginStatus, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        avatar = new JLabel();
        avatar.setText("");
        panel6.add(avatar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    @Override
    public JPanel getRootPanel() {
        return rootPanel;
    }

    @Override
    public void update(MainMenuContext context) {
        SwingUtilities.invokeLater(() -> {

            if (context.avatar() != null) {
                avatar.setIcon(new ImageIcon(context.avatar()));
            }

            if (context.username() != null) {
                loginStatus.setText(String.format(ONLINE_FORMAT, context.username()));
            } else {
                loginStatus.setText(OFFLINE_FORMAT);
            }
        });
    }
}
